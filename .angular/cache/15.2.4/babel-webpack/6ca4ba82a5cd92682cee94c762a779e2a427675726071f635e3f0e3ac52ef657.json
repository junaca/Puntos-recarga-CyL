{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { Subject, catchError, map, of, tap } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    /* get usuario() {\r\n      return {...this._usuario.asObservable()}\r\n    } */\n    constructor(http) {\n      this.http = http;\n      this._baseUrl = environment.mongoUrl;\n      this.usuario = new Subject();\n    }\n    login(name, password) {\n      const url = `${this._baseUrl}/auth/`;\n      const body = {\n        name,\n        password\n      };\n      return this.http.post(url, body).pipe(tap(resp => {\n        if (resp.ok) {\n          localStorage.setItem(\"token\", resp.token);\n          this.usuario.next(resp); /* {\r\n                                   name: resp.name!,\r\n                                   uid: resp.uid!,\r\n                                   } */\n        }\n      }), map(resp => resp.ok), catchError(err => of(err.error.msg)));\n    }\n    registro(name, password) {\n      const url = `${this._baseUrl}/auth/new`;\n      const body = {\n        name,\n        password\n      };\n      return this.http.post(url, body).pipe(tap(({\n        ok,\n        token\n      }) => {\n        if (ok) {\n          localStorage.setItem(\"token\", token);\n        }\n      }), map(resp => resp.ok), catchError(err => of(err.error.msg)));\n    }\n    logOut() {\n      localStorage.removeItem(\"token\");\n    }\n    /**\r\n     * Comprueba si el token almacenado en localStorage coinside con un usuario\r\n     *\r\n     * @return El usuario si lo ha encontrado. False en caso contrario.\r\n     */\n    validarToken() {\n      const url = `${this._baseUrl}/auth/renew`;\n      const headers = new HttpHeaders().set(\"x-token\", localStorage.getItem(\"token\") || \"\");\n      return this.http.get(url, {\n        headers\n      }).pipe(tap(resp => {\n        return resp;\n      }), map(resp => resp.ok), catchError(err => of(false)));\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}