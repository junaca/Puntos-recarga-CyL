{"ast":null,"code":"import { LngLatBounds, Map, Marker, Popup } from 'mapbox-gl';\nimport { Observable, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api\";\nexport let MapService = /*#__PURE__*/(() => {\n  class MapService {\n    get mapa() {\n      return this.map;\n    }\n    get route() {\n      return this.ruta;\n    }\n    get isMapReady() {\n      return !!this.map;\n    }\n    get popupInfo() {\n      return this.popupData.asObservable();\n    }\n    constructor(dac) {\n      this.dac = dac;\n      this.markers = [];\n      this.bounds = new LngLatBounds();\n      this.center = [-4.723, 41.6551800];\n      this.popupData = new Subject();\n      this.createMap();\n    }\n    setMap(map) {\n      this.map = map;\n    }\n    setUserLocation(coords) {\n      this.userLocation = coords;\n    }\n    flyTo(coords) {\n      if (!this.isMapReady) throw Error(\"El mapa no está inicializado\");\n      if (!this.markers.find(m => m.setLngLat(coords))) {\n        console.log(\" Marcador no encontrado \");\n      }\n      //console.log( this.markers )\n      this.map?.flyTo({\n        center: coords\n      });\n    }\n    createMap() {\n      this.mapa$ = new Observable(observer => {\n        this.map = new Map({\n          container: \"mapaElement\",\n          style: 'mapbox://styles/mapbox/streets-v11',\n          center: this.center,\n          zoom: 7.5,\n          maxZoom: 18,\n          minZoom: 4\n        });\n        this.map.on(\"load\", () => {\n          observer.next(this.map);\n          observer.complete;\n        });\n      });\n    }\n    generarMarkers(puntos, userLocation) {\n      this.markers.forEach(marker => marker.remove());\n      const newMarkers = [];\n      let newMarker;\n      if (!this.map) throw new Error(\"Mapa aún no inicializado\");\n      puntos.forEach(punto => {\n        const coords = punto.fields.dd;\n        newMarker = this.createNewMarker([coords[1], coords[0]]).addTo(this.map);\n        newMarkers.push(newMarker);\n      });\n      newMarker = this.createNewMarker(userLocation, \"green\").addTo(this.map);\n      /* newMarker.getElement().addEventListener(\"click\", (event) => {\r\n        //TODO: Pulsar el marcador\r\n        console.log(event.target)\r\n      }) */\n      this.markers = newMarkers;\n      this.bounds = new LngLatBounds();\n      this.bounds.extend(userLocation);\n      this.markers.forEach(marker => {\n        this.bounds.extend(marker.getLngLat());\n      });\n      this.map.fitBounds(this.bounds, {\n        padding: 20\n      });\n    }\n    getRouteBetweenPoints(start, end) {\n      this.markers.forEach(marker => marker.remove());\n      let newMarker = this.createNewMarker(end).addTo(this.map);\n      this.markers.push(newMarker);\n      newMarker = this.createNewMarker(start, \"green\").addTo(this.map);\n      this.markers.push(newMarker);\n      this.dac.get(`/${start.join(\"%2C\")}%3B${end.join(\"%2C\")}`).subscribe(resp => {\n        console.log(resp);\n        this.ruta = resp.routes[0];\n        this.drawPolyLine(resp.routes[0]);\n      });\n    }\n    //TODO: resetear la lista\n    drawPolyLine(route) {\n      console.log({\n        km: route.distance / 1000\n      });\n      const bounds = new LngLatBounds();\n      const coords = route.geometry.coordinates;\n      coords.forEach(([lng, lat]) => {\n        bounds.extend([lng, lat]);\n      });\n      this.map?.fitBounds(bounds, {\n        padding: 100\n      });\n      const sourceData = {\n        type: \"geojson\",\n        data: {\n          type: \"FeatureCollection\",\n          features: [{\n            type: \"Feature\",\n            properties: {},\n            geometry: {\n              type: \"LineString\",\n              coordinates: coords\n            }\n          }]\n        }\n      };\n      this.borrarRuta();\n      this.map?.addSource(\"RouteString\", sourceData);\n      this.map?.addLayer({\n        id: \"RouteString\",\n        type: \"line\",\n        source: \"RouteString\",\n        layout: {\n          \"line-cap\": \"round\",\n          \"line-join\": \"round\"\n        },\n        paint: {\n          \"line-color\": \"lightgreen\",\n          \"line-width\": 3\n        }\n      });\n    }\n    borrarRuta() {\n      if (this.map?.getSource(\"RouteString\")) {\n        this.map?.removeLayer(\"RouteString\");\n        this.map?.removeSource(\"RouteString\");\n      }\n    }\n    createNewMarker(lnglat, color) {\n      const popup = new Popup().on(\"open\", () => {\n        const coords = popup.getLngLat();\n        this.clickPopup(coords);\n      });\n      const newMarker = new Marker({\n        color\n      }).setLngLat(lnglat).setPopup(popup);\n      //console.log( newMarker.getElement() ) \n      return newMarker;\n    }\n    clickPopup(data) {\n      if (data.toArray() === this.userLocation) return;\n      console.log(this.userLocation);\n      this.popupData.next(data);\n      this.flyTo(data);\n    }\n    selectMarker(coords) {\n      return coords;\n    }\n  }\n  MapService.ɵfac = function MapService_Factory(t) {\n    return new (t || MapService)(i0.ɵɵinject(i1.DirectionsApiClient));\n  };\n  MapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapService,\n    factory: MapService.ɵfac,\n    providedIn: 'root'\n  });\n  return MapService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}